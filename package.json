{
  "name": "train",
  "version": "1.6.0",
  "description": "Train, an implementation of a ( FIFO ) Queue data structure. It uses 2 arrays, to simulate and perform a fast element shift operation on its head, without using the Array#shift() method.",
  "homepage": "https://github.com/rootslab/train",
  "repository": {
    "type": "git",
    "url": "git://github.com/rootslab/train.git"
  },
  "keywords": [
    "queue",
    "circular",
    "train",
    "iterate",
    "forEach",
    "shift",
    "pop",
    "push",
    "next",
    "flush",
    "get",
    "util"
  ],
  "tags": [],
  "author": {
    "name": "Guglielmo Ferri",
    "email": "44gatti@gmail.com"
  },
  "dependencies": {},
  "main": "index",
  "engines": {
    "node": ">=0.4.x"
  },
  "scripts": {
    "test": "bash test/run.sh",
    "bench": "bash bench/run.sh"
  },
  "license": "MIT",
  "readmeFilename": "Readme.md",
  "bugs": {
    "url": "https://github.com/rootslab/train/issues"
  },
  "readme": "###Train\n[![build status](https://travis-ci.org/rootslab/train.png?branch=master)](https://travis-ci.org/rootslab/train)\n[![NPM version](https://badge.fury.io/js/train.png)](http://badge.fury.io/js/train)\n\n[![NPM](https://nodei.co/npm/train.png?downloads=true&stars=true)](https://nodei.co/npm/train/)\n\n[![NPM](https://nodei.co/npm-dl/train.png)](https://nodei.co/npm/train/)\n\n> Train, an implementation of a ( FIFO ) Queue data structure.\n\n> It uses 2 arrays, to simulate and perform a fast element shift/pop operation, without using the Array#shift() method. \n\n> __Note:__ the performance degradation of _Array#shift_ method is particularly consistent when the array is very long ( with at least ~2^17 items ); it implies that for short lenghts it is still possible to use _Array#shift_ without particular performance degradation.\n\n###Install\n\n```bash\n$ npm install train [-g]\n```\n\n> __require__:\n\n```javascript\nvar Train  = require( 'train' );\n```\n\n###Run Tests\n\n```bash\n$ cd train/\n$ npm test\n```\n\n###Run Benchmarks\n\n```bash\n$ cd train/\n$ npm run-script bench\n```\n\n###Constructor\n\n> Create an instance, optionally with an Array of elements. \n\n```javascript\nTrain( [ Array elements ] )\n// or\nnew Train( [ Array elements ] )\n```\n\n###Properties\n\n```javascript\n// a property to get the queue size\n// NOTE that accessors are very slow, use the size() method\nTrain.length : Number\n```\n\n###Methods\n\n```javascript\n// get an element at certain index\nTrain#get( Number index ) : Object\n\n// get the head element from the queue\nTrain#shift() : Object\n\n/*\n * The same as shift, if it was called without argument.\n * if a number k was specified, it returns an array of K elements ( K <= k )\n * If k > queue size, it returns all the elements until the end of queue.\n */\nTrain#pop( [ Number k ] ) : Object\n\n/*\n * a method to ( circular ) get an element at the specified index,\n * or at current iterator position, starting from the head of queue; then\n * it automatically increments the current iterator position, without\n * evicting the element from the queue.\n */\nTrain#next( [ Number index ] ) : Object\n\n/*\n * push an element to the end of the queue;\n * optionally if el was an array, and concat flag was true,\n * every element will be pushed in the queue;\n * then it returns the resulting queue length.\n */\nTrain#push( Object el [, Boolean concat ] ) : Number\n\n// get the queue size/length\nTrain#size() : Number\n\n/*\n * a method to empty the queue.\n * it returns the number of elements flushed.\n */\nTrain#flush() : Number\n\n/*\n * apply a fn to every element of the queue, like Array#forEach\n * fn will get 3 args : ( Object element, Number index, Number qsize )\n * Note : on iteration, the size is fixed to the current queue size,\n * then it is possible to push other elements to the tail, these added elements\n * are not affected by iteration.\n */\nTrain#forEach( Function fn [, Object scope ] ) : Train\n\n/*\n * apply a fn to every element of the queue,\n * fn will get 3 args : ( Object element, Number index, Function done ).\n * After that every fn will have called done(), the callback will be launched\n * with an err argument ( if any has occurred ) and a number representing\n * the total processed/iterated elements in the queue, equal to the queue size\n * if no error has occurred.\n * Note: when queue size was 0, the callback will be immediately executed\n * with args: ( null, 0 ).\n * Note : on iteration, the size is fixed to the current queue size,\n * then it is possible to push other elements to the tail,  these added elements\n * are not affected by iteration.\n */\nTrain#iterate( Function fn [, Object scope, [, Function callback ] ] ) : Train\n\n```\n\n### MIT License\n\n> Copyright (c) 2013 &lt; Guglielmo Ferri : 44gatti@gmail.com &gt;\n\n> Permission is hereby granted, free of charge, to any person obtaining\n> a copy of this software and associated documentation files (the\n> 'Software'), to deal in the Software without restriction, including\n> without limitation the rights to use, copy, modify, merge, publish,\n> distribute, sublicense, and/or sell copies of the Software, and to\n> permit persons to whom the Software is furnished to do so, subject to\n> the following conditions:\n\n> __The above copyright notice and this permission notice shall be\n> included in all copies or substantial portions of the Software.__\n\n> THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\n> EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n> MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n> IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n> CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n> TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n> SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "_id": "train@1.4.5",
  "_from": "train@"
}
